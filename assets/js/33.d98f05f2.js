(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{238:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"字符串修改dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串修改dom"}},[t._v("#")]),t._v(" 字符串修改DOM")]),t._v(" "),a("p",[t._v("开发中插入大段的DOM节点或者比较长的DOM结构时比较麻烦。")]),t._v(" "),a("h2",{attrs:{id:"修改dom节点html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改dom节点html"}},[t._v("#")]),t._v(" 修改DOM节点HTML")]),t._v(" "),a("ul",[a("li",[t._v("innerHTML")]),t._v(" "),a("li",[t._v("outerHTML")])]),t._v(" "),a("p",[t._v("读写html标记的，可以调用某个节点的这两个属性，这两个属性是可写也是可读的。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("读模式：")]),t._v(" 这两个属性对应的值是一个字符串形式的html文本。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("写模式：")]),t._v(" 可以把一个字符串赋值给这两个属性，这时浏览器会把这个字符串转换成html文本插入到你对应的节点当中。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("区别：")]),t._v(" 包不包含当前节点")]),t._v(" "),a("ul",[a("li",[t._v("innerHTML只会修改或者读取当前节点的内部元素。")]),t._v(" "),a("li",[t._v("outerHTML修改或者读取的是当前节点以及它的子元素。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("注意事项：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("读模式下，不同的浏览器返回的字符串结果是不一样的：标签是否大小写，是否包含空格，是否包含缩进。HTML不区分大小写。")])]),t._v(" "),a("li",[a("p",[t._v("写模式下，设置的值跟解析后很有肯能是不一样的。因为浏览器会按照DOM标准去把这些字符串转换成浏览器可以识别的形式，这个过程也叫字符串到DOM树的序列化。")])]),t._v(" "),a("li",[a("p",[t._v("插入"),a("code",[t._v("<script>")]),t._v("和"),a("code",[t._v("<style>")]),t._v(",使用者两种方法插入"),a("code",[t._v("<script>")]),t._v("标签方式的js代码不能执行的。插入"),a("code",[t._v("<style>")]),t._v("标签的方式样式是生效的，但是IE8以下如果你单纯的插入一个字符串而且这个字符是以"),a("code",[t._v("<script>")]),t._v("和"),a("code",[t._v("<style>")]),t._v("开头的，这种字符串对应的HTML结构会被浏览器认为是无效的。可以在前面加上其他东西，但这些东西会显示到页面上的，需要用css或者插入之后用js删掉，如果使用空div也被认为是无效的。除非div标签要加上内容。")])]),t._v(" "),a("li",[a("p",[t._v("不是所有的标签都支持这两个属性")]),t._v(" "),a("p",[a("code",[t._v("<col>、 <colgroup>、<frameset>、 <head>、 <html>、 <style>、 <table>、 <tbody>、 <thead>、 <tfoot>和<tr>")])])])])])]),t._v(" "),a("h2",{attrs:{id:"读写dom节点文本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#读写dom节点文本"}},[t._v("#")]),t._v(" 读写DOM节点文本")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("innerText属性")])]),t._v(" "),a("li",[a("p",[t._v("outerText 属性")])])]),t._v(" "),a("p",[t._v("读写DOM节点对应的里面的文本。")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("读模式")])]),t._v(" "),a("p",[t._v("两个属性相同，都是把当前的标签下所有的文本内容返回回来")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("写模式")])]),t._v(" "),a("p",[t._v("innerText会把当前的节点下的所有html都删除掉，然后把所要替换的文本放到里面。")]),t._v(" "),a("p",[t._v("outerText会直接把当前的节点替换成一个文本节点，里面的值就是你写入的文本。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("注意事项：")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("把一个字符串赋值这两个属性，这时字符串里面的特殊字符会被转换，转换的结果就是你写进去的字符串。")])]),t._v(" "),a("li",[a("p",[t._v("这两个属性不是html标准")])]),t._v(" "),a("li",[a("p",[t._v("outerText属性基本不用。")])]),t._v(" "),a("li",[a("p",[t._v("firefox浏览器不支持innerText顺序他有个类似的textContent属性。使用的时候要做下判断。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInnerText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("element")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textContent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textContent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInnerText")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textContent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \telement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textContent "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \telement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("为什么先判断textContent而不是innerText？")])])])])]),t._v(" "),a("h2",{attrs:{id:"innertext和textcontent区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#innertext和textcontent区别"}},[t._v("#")]),t._v(" innerText和textContent区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("textContent返回的值是包括script标签和style标签的内容，而innerText是不包含的。")])]),t._v(" "),a("li",[a("p",[t._v("innerText返回值依赖于页面的显示，textContent依赖于代码内容。")]),t._v(" "),a("p",[t._v("如果子节点通过样式隐藏的innerText就不会获取这个隐藏的内容，但textContent会返回当前节点下的所有文本内容。")])]),t._v(" "),a("li",[a("p",[t._v("innerText是受css影响的，它依赖于页面的显示。所以使用innerText去设置页面值的时候它会触发一个叫回流的操作。而textContent不一定会触发回流，有可能会触发重绘。")]),t._v(" "),a("blockquote",[a("p",[t._v("看设置的值，比如原来是两个，重新改成两个字，占的面积没有变整个页面也没有排版，这时既不会重绘也不回回流。如果文版长度设置为不一样的长度，对一个小的区域内有影响了，这个时候只会触发重绘，如果设置的值配置设置的样式可能对整个页面都有影响了，这时时候可能会触发回流。")])]),t._v(" "),a("p",[t._v("**回流：**当我们去编写一个html并且让它在网页上显示的时候，浏览器为了把这个HTML文本显示在页面上它会创建两棵树，一颗叫做DOM树，一颗叫做渲染树用于绘制和渲染。当我们使用innerText的时候它是依赖于页面显示的所以它跟渲染树关系紧密。当你为一个节点设置innerText的时候，浏览器会认为你重新设置了innerText会对整个页面的渲染造成影响，所以这个时候它会从当前的那个节点一直往回追溯，从子找父一直找到根节点。然后把整个树渲染一下。我们把这种情况称做回流。")]),t._v(" "),a("p",[t._v("** 重绘：** 是指对当前的DOM节点和它的子节点进行重新的排列。")]),t._v(" "),a("p",[t._v("回流是往根节点找，重绘是往根节点找。重绘只是对页面的某一个区域有影响，回流是对整个页面有影响的。发生了回流一定会引起重绘，发生重绘不会影响回流。")])]),t._v(" "),a("li",[a("p",[t._v("设置值不同，innerText设置值会被格式化而textContent不会。因为innerText是依赖于页面显示的，而textContent只依赖于代码。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("intext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"intext"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a\\na"')]),t._v(" \ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("textContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a\\na"')]),t._v("\n")])])]),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("intext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("a"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("br")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("a"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("a a"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("blockquote",[a("p",[t._v('想要显示统一使用style="white-space: pre;" 让页面以代码的形式显示。')])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("app"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token style-attr language-css"}},[a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('="')]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token property"}},[t._v("white-space")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("a a"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("读取值不同，")]),t._v(" "),a("p",[t._v("innerText会将里面的空标签当成换行来处理，连续多个空标签也会被当成一个换行来处理。因为innerText是依赖于页面显示的，在代码中写了一个空标签最后显示在页面上是一个换行。所以innerText取到的是一个换行。代码中连续多个空标签页面上显示的还是一个换行。所以innerText处理多个空标签的时候也会当作一个换行来处理。 对于一个DOM节点来说它在页面上显示什么样最后取innerText得的值就是什么样。")]),t._v(" "),a("p",[t._v("textContent对于空标签和多行空标签只会返回一行文本。即使在代码中有"),a("code",[t._v("<br/>")]),t._v("标签也会返回一行文本，除非DOM节点下面还有子节点。而且子节点里面还包含文本。这种结构它才会返回多行文本。")]),t._v(" "),a("ul",[a("li",[t._v("如果一个DOM节点存在子节点，而且子节点还有子节点，甚至子节点的下面还包含文本的时候，这个时候他们两个返回的内容都会包含换行。（很难统一不建议）")])])]),t._v(" "),a("li",[a("p",[t._v("获取文本节点的另外一种方式："),a("strong",[t._v("nodeValue")])]),t._v(" "),a("p",[t._v("直接找到这个文本节点，然后读取他的nodeValue。使用这种方式它是不能获取DOM元素的内容的，你必须选择的是一个文本节点。")])])]),t._v(" "),a("h2",{attrs:{id:"自闭合元素的处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自闭合元素的处理"}},[t._v("#")]),t._v(" 自闭合元素的处理")]),t._v(" "),a("p",[t._v("不是成对出现的，是不包含子标签的，称做自闭合元素或无内容元素")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("br")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("hr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("img")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("input")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n")])])]),a("p",[t._v("对自闭合元素使用innerText和innerHTML会怎么样？")]),t._v(" "),a("p",[t._v("不会造成错误，但不建议。")]),t._v(" "),a("p",[t._v("对"),a("code",[t._v("<br><hr><img/>")]),t._v("使用innerText和innerHTML修改值，浏览器会把这戏标签变成闭合标签结构，"),a("code",[t._v("<br>值<br/>")]),t._v("  但在浏览器上不会有什么变化。这种结构不符合规范，不建议使用。")]),t._v(" "),a("p",[t._v("对表单元素 "),a("code",[t._v("<input>")]),t._v(" 使用innerText和innerHTML修改值的时候，不同浏览器在不同的js执行周期内会对表单里面的value的值造成不同的影响。也就是说这样设置有的时候会影响表单中的value值。")])])}),[],!1,null,null,null);s.default=e.exports}}]);