(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{216:function(s,a,t){"use strict";t.r(a);var r=t(0),e=Object(r.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作符"}},[s._v("#")]),s._v(" 操作符")]),s._v(" "),t("h2",{attrs:{id:"一元操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符"}},[s._v("#")]),s._v(" 一元操作符")]),s._v(" "),t("p",[s._v("只可以操作一个表达式的操作符")]),s._v(" "),t("h3",{attrs:{id:"一元加"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一元加"}},[s._v("#")]),s._v(" 一元加")]),s._v(" "),t("p",[s._v("一元加操作符，将要操作的数据类型转化为数字。所有数据类型都可以转换为数字")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1 对数字操作返回数字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// -1 对数字返回数字本身")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1 对布尔操作返回 0，1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//NaN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'12qweqw'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//NaN 对字符串操作不能转化数字返回 NaN")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//123  字符串可以返回数字的返回数字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("object "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// NaN 或 数字")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//一元加操作符，将要操作的数据类型转化为数字。")]),s._v("\n")])])]),t("h3",{attrs:{id:"一元减"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一元减"}},[s._v("#")]),s._v(" 一元减")]),s._v(" "),t("p",[s._v("先进行一元加操作，将要操作的表达式转化为数字，然后再将它转化为负数")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\nb"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("b "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//-0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//true js中0 和-0相等")]),s._v("\n")])])]),t("h3",{attrs:{id:"递增和递减操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#递增和递减操作符"}},[s._v("#")]),s._v(" 递增和递减操作符 ++ --")]),s._v(" "),t("p",[s._v("同一元操作符一样，先将要操作的表达式返回值转化为数字，然后进行加减1操作。")]),s._v(" "),t("p",[s._v("前置型 ：在js的解释器中，首先对表达式进行加/减1的操作，然后再参与运算。")]),s._v(" "),t("p",[s._v("后置型：先把整个表达式参与完运算，然后再把表达式进行加/减1操作。")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 21")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 21")]),s._v("\n")])])]),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num1"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 22")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 21")]),s._v("\n")])])]),t("p",[s._v("如果表达式返回的不是数字进行递增递减操作符返回NaN")]),s._v(" "),t("p",[t("strong",[s._v("副效应")])]),s._v(" "),t("p",[s._v("执行前置递增和递减操作时，变量的值都是在语句被求值以前改变的。")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("a\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a:2, b:3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1. js先运算b这个表达式返回b，遵循运算顺序从左向右原则")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2. a++ 再暂时称为C 因是后置型C返回结果为1，此时变量a变成了2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//3. c+a 为1 + 2  返回给b 就是3了")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" \nb"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("a\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// a:2, b:3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("a\n")])])]),t("ul",[t("li",[t("p",[s._v("优先级")]),s._v(" "),t("p",[s._v("属性访问  >  一元操作符  >  乘除 > 加减 > 比较 > 相等=== == !=== !== > 与运算>或运算>三木元算>赋值运算")]),s._v(" "),t("ol",[t("li",[s._v("属性访问表达式有最高优先级 .[]")]),s._v(" "),t("li",[s._v("赋值操作 =最低优先级，赋值操作")]),s._v(" "),t("li",[s._v("运算当中 ，一元运算符最高")])]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("结合性")]),s._v(" "),t("p",[s._v("相同优先级同时存在时先算那个？如乘除")]),s._v(" "),t("p",[s._v("左结合：其他")]),s._v(" "),t("p",[s._v("右结合：一元操作符，三元运算符 ，赋值运算符")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//false  ++ 和! 都是一元操作符所有从右向左")]),s._v("\nx"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("f"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("g "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//三目运算符  ")]),s._v("\nx"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("d"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v("f"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("g"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 都是三目操作符从右向左")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("d "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//赋值操作符从右向左")]),s._v("\n")])])])]),s._v(" "),t("li",[t("p",[s._v("运算顺序")]),s._v(" "),t("p",[s._v("表达式中包含子表达式时如何运算？")]),s._v(" "),t("p",[s._v("永远从左向右运行")])]),s._v(" "),t("li",[t("p",[s._v("注意")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("一元加/减 和递加/减 操作符对所有的数据类型都有效，都是先把数据类型转为number然后再操作")])]),s._v(" "),t("li",[t("p",[s._v("递减操作可能会不精确")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" f "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nf"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 值变成 0.10000000000000009（由于浮点舍入错误所致）")]),s._v("\n")])])])])])])]),s._v(" "),t("h3",{attrs:{id:"按位非-not"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按位非-not"}},[s._v("#")]),s._v(" 按位非(NOT) ~")]),s._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 二进制 00000000000000000000000000011001")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("~")]),s._v("num1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 二进制 11111111111111111111111111100110")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// -26")]),s._v("\n")])])]),t("p",[s._v("将数字转化为负数，然后减一")]),s._v(" "),t("h3",{attrs:{id:"逻辑非"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑非"}},[s._v("#")]),s._v(" 逻辑非")]),s._v(" "),t("p",[s._v("逻辑非操作符由一个叹号（！）表示。")]),s._v(" "),t("p",[t("strong",[s._v("先将数据类型转化为布尔类型，然后取反。")])]),s._v(" "),t("p",[s._v("将其他类型转化为布尔类型用 （!!）")]),s._v(" "),t("p",[s._v("对象转化为布尔类型都是true")]),s._v(" "),t("p",[s._v("在js中只有6个类型进行逻辑非会转化为true：")]),s._v(" "),t("p",[s._v("​\t"),t("code",[s._v("undefines null NaN 0 -0 “”")])]),s._v(" "),t("h3",{attrs:{id:"其他一元操作符-（单词形式操作符）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他一元操作符-（单词形式操作符）"}},[s._v("#")]),s._v(" 其他一元操作符 （单词形式操作符）")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("typeof 返回后面表达式的操作类型")]),s._v(" "),t("p",[s._v("typeof() 不是函数，（）是为了先计算()内部的表达式")]),s._v(" "),t("p",[s._v("()的优先级跟，属性访问表达式.[] 是同级别的。")])]),s._v(" "),t("li",[t("p",[s._v("void 返回undefined")])]),s._v(" "),t("li",[t("p",[s._v("delete 删除属性")])])]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"二元操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二元操作符"}},[s._v("#")]),s._v(" 二元操作符")]),s._v(" "),t("p",[s._v("instanceof")]),s._v(" "),t("p",[s._v("on")])])}),[],!1,null,null,null);a.default=e.exports}}]);