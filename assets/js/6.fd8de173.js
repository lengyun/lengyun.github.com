(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{230:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),n("p",[t._v("计算机的本质是计算，计算的本质是对值进行操作，值就是数据。数据类型就是对值进行分类。常规分类：数字，文本，真假")]),t._v(" "),n("p",[t._v("ECMAScript 中有 5 种简单数据类型（也称为基本数据类型）：")]),t._v(" "),n("p",[t._v("Boolean、Number、String、Undefined、Null")]),t._v(" "),n("p",[t._v("1 种复杂数据类型——Object。")]),t._v(" "),n("p",[t._v("Object 本质上是由一组无序的名值对组成的。除了基础数据类型其他都是对象。")]),t._v(" "),n("p",[t._v("仓老师：名字(string)，年龄(number)，是否知名(boolean)， 生日(undefined/null)，三维(object)，作品(array)")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("只有对象才有方法")]),t._v(" "),n("p",[n("strong",[t._v("对象所具有的功能（如:笔能写字）在js中叫做方法。每一个对象都有自己的方法。理论上说只有对象才有方法。基础类型没有方法。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\na"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" \na"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给a设置属性时js解释器会把a转换为对象调用对象的方法，而且这种方法在过程结束后就自动关闭。涉及到的临时变量都会清除掉。")]),t._v("\na"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"ABCD"')]),t._v("\na "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"abcd" ')]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("数据类型的可变性")]),t._v(" "),n("p",[t._v("基础数据类型不可变")]),t._v(" "),n("p",[t._v("复杂数据类型Object可改变")]),t._v(" "),n("p",[t._v("js中基础数据类型比较时是对值进行比较，对象的比较时对引用进行比较。任何两个独立的对象都不相等。")])]),t._v(" "),n("li",[n("p",[t._v("ECMAScript 数据类型具有"),n("strong",[t._v("动态性")]),t._v("：")]),t._v(" "),n("p",[t._v("动态性是指js在定义变量时，只是给变量赋值这么简单，并没有确定变量的数据类型。只有在参与计算时才会动态的去取它所对应的数据类型。")])])]),t._v(" "),n("h2",{attrs:{id:"typeof操作符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typeof操作符"}},[t._v("#")]),t._v(" typeof操作符")]),t._v(" "),n("p",[t._v("typeof操作符用来检测给定变量的数据类型，typeof返回的都是字符串。typeof不是函数")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//返回true 相当于"boolean"==b')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//返回 "boolean"')]),t._v("\n")])])]),n("h2",{attrs:{id:"基本数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Underfined")]),t._v(" "),n("blockquote",[n("p",[t._v("使用 var 声明变量但未对其加以初始化")])]),t._v(" "),n("p",[t._v("程序内部先定义一个undefined 提高性能，防止到window对象上找")])]),t._v(" "),n("li",[n("p",[t._v("Null")]),t._v(" "),n("blockquote",[n("p",[t._v("null 值表示一个空对象指针。只要 意在 保存 对象 的 变量 还没有 真正 保存 对象， 就应 该 明确 地 让 该 变量 保存 null 值。")])]),t._v(" "),n("p",[n("strong",[t._v("相同点：")])]),t._v(" "),n("ol",[n("li",[t._v("都只有一个值")]),t._v(" "),n("li",[t._v("参与判断都返回false")]),t._v(" "),n("li",[t._v("都没有方法")])]),t._v(" "),n("p",[n("strong",[t._v("不同点：")])]),t._v(" "),n("ol",[n("li",[t._v("null 是关键字，undefined不是关键字")]),t._v(" "),n("li",[t._v("null 本质是一个空对象，undefined是win对象的属性，虽然翻译叫未定义，但undefined是个已经定义的属性，它的值叫做未定义undefined。函数中定义undefined提高性能。")]),t._v(" "),n("li",[t._v('typeof查看类型时返回不同。undefined返回"undefined"，null返回"object"')]),t._v(" "),n("li",[t._v("试图传化为数字时，undefined 返回NaN，null返回0")])]),t._v(" "),n("p",[n("strong",[t._v("用法：")])]),t._v(" "),n("ol",[n("li",[t._v("声明变量而且必须赋值时，或者创建一个对象要给对象的某个属性赋空值时，可以使用null")]),t._v(" "),n("li",[t._v("检测某个值是否存在时用 === undefined ，通常用于判断函数中的某个参数是否存在时。")]),t._v(" "),n("li",[t._v("检测某个值是否存在或者是否为空时用 == null")])]),t._v(" "),n("p",[n("strong",[t._v("建议：")])]),t._v(" "),n("ol",[n("li",[t._v("不要在赋值时用undefined，用null")]),t._v(" "),n("li",[t._v("判断值是否存在或是否为空时，== null")]),t._v(" "),n("li",[t._v("明确知道返回的值时用 === null 或 === undefined")])])]),t._v(" "),n("li",[n("p",[t._v("Boolean")]),t._v(" "),n("p",[t._v("转型函数Boolean()")]),t._v(" "),n("p",[t._v("js中所有的数据类型都可以转换为布尔类型。")]),t._v(" "),n("p",[t._v("可以被转换为false的6个数据类型："),n("strong",[t._v("undefined")]),t._v("、"),n("strong",[t._v("null")]),t._v("、 "),n("strong",[t._v("0")]),t._v("、 "),n("strong",[t._v("-0")]),t._v("、 "),n("strong",[t._v("NaN")]),t._v(" 、"),n("strong",[t._v("' '")]),t._v("。")]),t._v(" "),n("p",[t._v("转化为布尔类型的简写方法 ：!!")]),t._v(" "),n("blockquote",[n("p",[t._v("空对象{} 和空数组[] 转化为布尔值都是true，因对象转化为布尔值都是true")])])]),t._v(" "),n("li",[n("p",[t._v("Number")]),t._v(" "),n("p",[t._v("数字可分为3类：常规的数字，Infinity无穷，NaN")]),t._v(" "),n("ul",[n("li",[t._v("整数：正常使用")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" octalNum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("070")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//8进制 0开头（0~7）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hexNum1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xA1f")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//16进制度 0x开头（0～9及A～F）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" floatNum"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.125e7")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//e表示法，等于31250000")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.00000000000000003")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//3e-17")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("NaN（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("浮点数")]),t._v(" "),n("p",[t._v("所谓浮点数值，就是该数值中必须包含一个小数点，并且小数点后面必须至少有一位数字。")]),t._v(" "),n("p",[t._v("浮点数值需要的内存空间是保存整数值的两倍。")]),t._v(" "),n("p",[t._v("永远不要拿两个小数进行比较。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.30000000000000004")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1.转化为整数计算，然后再转化为浮点数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0.3")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2.保留特定位数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toFixed")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0.30")]),t._v("\n")])])]),n("p",[t._v("如果涉及到小数的乘法和加法的时候一定好保持"),n("strong",[t._v("书写的顺序一致")])]),t._v(" "),n("blockquote",[n("p",[t._v("现打折再相加还是先相加后打折的问题")])])]),t._v(" "),n("li",[n("p",[t._v("数值范围")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity 无穷大")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n")])])])])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("NaN")]),t._v(" "),n("p",[t._v("NaN，即非数值（Not a Number）是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数未返回数值的情况。")]),t._v(" "),n("p",[t._v("NaN 是一个数字，但它不等于任何数字")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false NaN不等于NaN")]),t._v("\n")])])]),n("p",[n("strong",[t._v("isNaN()")]),t._v(" 函数判断被传入的数据是否能被转换为数字。不能转化为 数字的返回ture。")])]),t._v(" "),n("li",[n("p",[t._v("数值转换")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Number() 可以把任何类型的数据类型转化为数字，")]),t._v(" "),n("p",[t._v("返回两种类型 1.数字 2.NaN")])]),t._v(" "),n("li",[n("p",[t._v("parseInt() 和parseFloat() 用于处理字符串，保持第二个参数为10，按十进制解析")])])])])]),t._v(" "),n("blockquote",[n("p",[n("code",[t._v("Number()")]),t._v("可以用于任何数据类型,转换的是整个值")]),t._v(" "),n("p",[n("code",[t._v("parseInt()")]),t._v("从第一个字符（位置0）开始解析忽略字符串前面的空格，第一个非空格字符不是数字或负号，返回NaN。如果第一个字符是数字，会继续解析直到解析完所有后续字符串或者遇到了一个非数字字符。")]),t._v(" "),n("p",[t._v('parseInt()能够识别出各种整数格式。字符串以"0"开头且后跟数字字符，则会将其当作一个八进制数来解析。以“0x”开头后跟数字字符会被当做一个十六进制数来解析。所以最好明确 '),n("strong",[t._v("指定基数")])]),t._v(" "),n("p",[n("code",[t._v("parseFloat()")]),t._v("也是从第一个字符（位置0）开始解析每一个字符。也是一直解析到字符串末尾，或者解析到遇见一个无效的浮点数字字符为止。字符串中第一个小数点是有效的，而第二个小数点就是无效的了，它后面的字符串将被忽略。只解析十进制")])])]),t._v(" "),n("li",[n("p",[t._v("String")]),t._v(" "),n("p",[t._v("字符串的本质是Ucode编码")]),t._v(" "),n("p",[t._v("字符串建议使用单引号，如果单引号的字符串中有单引号 使用 ' 字符字面量")]),t._v(" "),n("p",[t._v("字符字面量可以出现在字符串中的任意位置，而且也将被作为一个字符来解析")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//换行 ")]),t._v("\n\\u03a3 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//表示的一个Unicode字符 希腊字符Σ")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// length字符串长度")]),t._v("\n")])])]),n("blockquote",[n("p",[t._v("ECMAScript中的字符串是不可变的，字符串一旦创建，他们的值就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再另一个包含新值的字符串填充该变量。")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" abcd "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),t._v("\nabcd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nabcd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\nabcd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])])]),n("ul",[n("li",[n("p",[t._v("转换为字符串")]),t._v(" "),n("p",[n("code",[t._v("toString()")]),t._v(" 方法返回相应值的字符串表现。")]),t._v(" "),n("p",[t._v("对所有的数据都适用，除了 NaN和undefined 因这两个数据类型是没有任何方法")]),t._v(" "),n("blockquote",[n("p",[t._v("数值的toString()方法可以传递一个数值基数参数，输入对应的二进制、八进制格式表示的字符串值。")])]),t._v(" "),n("p",[n("code",[t._v("String()")]),t._v(" 转型函数")]),t._v(" "),n("blockquote",[n("p",[t._v("在不知道要转换的值是不是 null 或 undefined 的情况下，使用转型函数 String()，这个函数能够将任何类型的值转换为字符串。")]),t._v(" "),n("p",[t._v("如果值有 toStrign()方法，则调用该方法（无参数）。")]),t._v(" "),n("p",[t._v("没有toString()方法，null 返回“null”，undefined返回“undefined”")])])])]),t._v(" "),n("h4",{attrs:{id:"总结："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结："}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("都有一个跟自己相同的名字的方法 "),n("strong",[t._v("Boolean()")]),t._v(" "),n("strong",[t._v("Number()")]),t._v(" "),n("strong",[t._v("String()")])])]),t._v(" "),n("li",[n("p",[t._v("首字母大写")])]),t._v(" "),n("li",[n("p",[t._v("任何数据类型都可以传入")])]),t._v(" "),n("li",[n("p",[t._v("传进去得到的结果都跟自己对应的")]),t._v(" "),n("p",[n("strong",[t._v("Boolean()")]),t._v(">true,false")]),t._v(" "),n("p",[n("strong",[t._v("Number()")]),t._v(">数字和NaN")]),t._v(" "),n("p",[n("strong",[t._v("String()")]),t._v(">")])]),t._v(" "),n("li",[n("p",[t._v("输出的结果都是两类")])])])])]),t._v(" "),n("h2",{attrs:{id:"复杂数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#复杂数据类型"}},[t._v("#")]),t._v(" 复杂数据类型")]),t._v(" "),n("p",[t._v("​       对象其实就是属性的无序集合. 特点")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("对象类型跟基础数据类型相比的"),n("strong",[t._v("不同点")]),t._v("：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("对象是"),n("strong",[t._v("有属性")]),t._v("的，原始数据是没有属性的。对象是由属性构成的无序合集。")]),t._v(" "),n("p",[t._v("对象的所有属性所对应的值，可以是原始数据类型，也可以是对象。")]),t._v(" "),n("blockquote",[n("p",[t._v("键值对：一个值 和值对应的名字。对象是由键值对的形式组成的")])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("有方法")]),t._v("，方法是对象的一种特殊属性，方法是由函数组成的为了实现某种功能。方法也是一种特殊的对象。")])]),t._v(" "),n("li",[n("p",[t._v("对象是"),n("strong",[t._v("可以改变")]),t._v("的，基础数据类型是不能改变的。")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("对象的分类：")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("内部对象")]),t._v(" "),n("p",[t._v("js语言自带的对象17个")]),t._v(" "),n("p",[t._v("内部对象分类：使用时不用new")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("错误的对象")])]),t._v(" "),n("li",[n("p",[t._v("常用对象")]),t._v(" "),n("p",[t._v("布尔类型，字符串类型，数字类型，数组，时间，函数function ，Object，正则表达式）")])]),t._v(" "),n("li",[n("p",[t._v("内置对象")]),t._v(" "),n("p",[t._v("Math Global  JSON")])])])]),t._v(" "),n("li",[n("p",[t._v("宿主对象")]),t._v(" "),n("p",[t._v("js运行环境 window Document")])]),t._v(" "),n("li",[n("p",[t._v("自定义对象")])])])]),t._v(" "),n("li",[n("p",[t._v("原始数据类型转换为对象：**")]),t._v(" "),n("p",[t._v("Object()函数")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Boolean {true}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Number {123}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"qweqwe"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//String {"qweqwe"} 有length属性')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {}")]),t._v("\n")])])]),n("p",[t._v("原始数据类型的比较是值的比较，对象的比较是引用的比较")])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("如何创建对象")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("对象字面量")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nicholas"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("大部分属性名可以不用引号，如果名称出现了空格、元字符、关键字用引号。最后一个不用逗号")])]),t._v(" "),n("li",[n("p",[t._v("new 操作符")]),t._v(" "),n("p",[n("code",[t._v("new Object()")]),t._v("  不需要传值后面的（）可以省略")])]),t._v(" "),n("li",[n("p",[t._v("ES5创建对象方法")]),t._v(" "),n("p",[t._v("Object.create(原型,对象描述信息)")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("对象属性的查询")])]),t._v(" "),n("ul",[n("li",[t._v("使用 “.”")]),t._v(" "),n("li",[t._v("使用 “[]”")])])])]),t._v(" "),n("p",[n("img",{attrs:{src:a(72),alt:"js对象属性查询解释器执行流程"}})]),t._v(" "),n("h2",{attrs:{id:"数据类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[t._v("#")]),t._v(" 数据类型转换")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("原始类型到字符串转换")]),t._v(" "),n("blockquote",[n("p",[t._v("String() 或 直接加空字符串")])])]),t._v(" "),n("li",[n("p",[t._v("原始类型到数字")]),t._v(" "),n("blockquote",[n("p",[t._v('Number() 或者一元加操作符 +"123"')])]),t._v(" "),n("p",[t._v("underfined 到数字 是NaN")]),t._v(" "),n("p",[t._v("null 到数字是 0")]),t._v(" "),n("p",[t._v("true 1")]),t._v(" "),n("p",[t._v("false 0")]),t._v(" "),n("p",[t._v("字符串中都是数字 直接去掉引号")]),t._v(" "),n("p",[t._v("字符串中不是数字 NaN")]),t._v(" "),n("p",[t._v("空字符串 0")])]),t._v(" "),n("li",[n("p",[t._v("原始类型到布尔值")]),t._v(" "),n("blockquote",[n("p",[t._v("Boolean() 或者 !!")])]),t._v(" "),n("p",[n("strong",[t._v("undefined")]),t._v("、"),n("strong",[t._v("null")]),t._v("、 "),n("strong",[t._v("0")]),t._v("、 "),n("strong",[t._v("-0")]),t._v("、 "),n("strong",[t._v("NaN")]),t._v(" 、"),n("strong",[t._v("' '")]),t._v(" 这6个为false 其他为true")])]),t._v(" "),n("li",[n("p",[t._v("原始类型到对象")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("null 和 underfined 转化为对象为空对象或报错")])]),t._v(" "),n("li",[n("p",[t._v("数字 和 布尔 转化为对象:")]),t._v(" "),n("p",[t._v("得到数字对象和布尔对象，他的值是被转化的值")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("Boolean "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Boolean {false}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Number {123}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("字符串转换为对象")]),t._v(" "),n("p",[t._v("得到字符串对象，它的值是被转化的值。")]),t._v(" "),n("p",[t._v("还得到length属性表示字符长度")]),t._v(" "),n("p",[t._v("另外每一个字符都会被创建字符的索引")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"qweqwe"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//String {"qweqwe"}')]),t._v("\n")])])])])])]),t._v(" "),n("li",[n("p",[t._v("对象到原始类型")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("对象转化为Boolean")]),t._v(" "),n("p",[t._v("对象类型转化为布尔类型都返回 true。")]),t._v(" "),n("blockquote",[n("p",[t._v("把false这个布尔类型转化为对象成为Object(false) 再转化为布尔Boolean(Object(false))就成了true")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Object")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("对象转化为字符串")]),t._v(" "),n("p",[t._v("先toString() 后 valueOf()")]),t._v(" "),n("p",[t._v("先toString()看返回的是否为原始值，是就转为字符串。不是就使用valueOf()看返回的是不是原始类型，是就转为字符串。")])]),t._v(" "),n("li",[n("p",[t._v("对象转化为数字")]),t._v(" "),n("p",[t._v("先valueOf() 后 toString()")]),t._v(" "),n("p",[t._v("先valueOf()返回的是原始值就直接返回，如果还是对象再调用toString() 看返回的是否是原始类型，如果是原始就转化为数字，如果还是对象就报错")]),t._v(" "),n("p",[t._v("toString() 把当前对象通过字符串形式表示出来")]),t._v(" "),n("p",[t._v("valueOf() 返回原始值，没有原始值返回对象")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[].valueOf()得到还是[]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[].toString() 得到 ""')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Number('') 得到 0")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a={}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a.valueOf()得到还是{}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//a.toString() 得到 "[object Object]"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Number('[object Object]') 得到 NaN")]),t._v("\n")])])]),n("p",[n("strong",[t._v("toString()")]),t._v("  是可以接受参数的，参数是2-36这个范围，表示几进制")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//随机生成一个字母或数字混排的时候")]),t._v("\nMath"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"0.19sx7el6ichj"')]),t._v("\n")])])])])])])]),t._v(" "),n("h2",{attrs:{id:"变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),n("p",[t._v("定义变量是否使用var区别：")]),t._v(" "),n("ol",[n("li",[t._v("使用var 定义的是局部变量，不使用var定义的是全局变量")]),t._v(" "),n("li",[t._v("使用了var定义的变量是不可以删除的，不使用var定义的变量是可以被删除的（对象的属性可以被删除）。")]),t._v(" "),n("li",[t._v("使用了var定义的变量会被提前，不使用var定义的变量不会被提前。")])]),t._v(" "),n("p",[n("strong",[t._v("原理：")])]),t._v(" "),n("p",[t._v("使用var才是真正的定义了一个变量，所有定义的变量都有一个作用域。作用域是当前的函数。")]),t._v(" "),n("p",[t._v("不使用var不是定义了一个变量，是给window增加了一个属性。没有使用var定义的变量程序一层层的查找直到window还没找到。就在win上增加一个属性，就成了全局属性，对象上的属性是可以被删除的。")]),t._v(" "),n("hr"),t._v(" "),n("blockquote",[n("p",[t._v("Object 类型是所有它的实例的基础。换句话说，Object 类型所具有的任何属性和方法也同样存在于更具体的对象中")])]),t._v(" "),n("ul",[n("li",[n("p",[t._v("constructor(构造函数)[kən'strʌktə]")]),t._v(" "),n("blockquote",[n("p",[t._v("保存着用于创建当前对象的函数")])])]),t._v(" "),n("li",[n("p",[t._v("hasOwnProperty(propertyName)")]),t._v(" "),n("blockquote",[n("p",[t._v("用于检查给定的属性在当前对象实例中是否存在.")])])]),t._v(" "),n("li",[n("p",[t._v("isPrototypeOf(object)")]),t._v(" "),n("blockquote",[n("p",[t._v("用于检查传入的对象是否是传入对象的原型")])])]),t._v(" "),n("li",[n("p",[t._v("propertyIsEnumerable(propertyName)")]),t._v(" "),n("blockquote",[n("p",[t._v("用于检查给定的属性是否能够使用 for-in 语句来枚举")])])]),t._v(" "),n("li",[n("p",[t._v("toLocaleString()")]),t._v(" "),n("blockquote",[n("p",[t._v("返回对象的字符串表示，该字符串与执行环境的地区对应。")])])]),t._v(" "),n("li",[n("p",[t._v("toString()")]),t._v(" "),n("blockquote",[n("p",[t._v("返回对象的字符串表示。")])])]),t._v(" "),n("li",[n("p",[t._v("valueOf()")]),t._v(" "),n("blockquote",[n("p",[t._v("返回对象的字符串、数值或布尔值表示")])])])])])}),[],!1,null,null,null);s.default=e.exports},72:function(t,s,a){t.exports=a.p+"assets/img/jsObjectFindAttributeFlow.f21b1949.png"}}]);