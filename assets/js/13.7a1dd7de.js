(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{228:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"函数的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的创建"}},[t._v("#")]),t._v(" 函数的创建")]),t._v(" "),a("p",[t._v("对象是很多属性和方法的合集。函数是一个特殊对象，函数在js中是代码的合集。")]),t._v(" "),a("p",[t._v("把一段代码抽象成一个功能模块，然后把它定义出来，这就是一个函数。")]),t._v(" "),a("p",[a("strong",[t._v("函数特点：")]),t._v(" 一处定义多处执行。")]),t._v(" "),a("p",[a("strong",[t._v("函数的参数化："),a("strong",[t._v("在函数的定义和使用的过程中是可以传递参数到函数中。传递参数的这个过程就叫做函数的参数化。函数定义的时候包含的参数叫")]),t._v("形参")]),t._v("，形参在函数定义的时候是需要传递给函数的。而它在函数的使用过程当中，也就是在函数的函数体内部是以"),a("strong",[t._v("局部变量的形式存在")]),t._v("的。在函数真正运行的时候接收到的参数叫"),a("strong",[t._v("实参")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("函数声明语句")]),t._v(" "),a("p",[t._v("function  函数名  (形参) { 函数体，函数运行时要执行的代码}")]),t._v(" "),a("p",[t._v("结尾不需要使用分号 ；")])]),t._v(" "),a("li",[a("p",[t._v("匿名函数表达式语句")]),t._v(" "),a("p",[t._v("var a = function (形参) {}")]),t._v(" "),a("p",[t._v("相当于创建没有名字的函数（匿名函数），同时把这个函数赋值给一个变量、参数或者属性。")]),t._v(" "),a("ul",[a("li",[t._v("把函数当成一个值，赋值给一个变量。")]),t._v(" "),a("li",[t._v("创建一个对象，并且在这个对象我们需要创建一个方法的时候。")]),t._v(" "),a("li",[t._v("当一个函数作为参数传递给另外一个函数，或者作为回调函数使用的时候。")])]),t._v(" "),a("p",[a("strong",[t._v("不同点：")])]),t._v(" "),a("p",[t._v("函数声明语句，整个函数都会"),a("strong",[t._v("声明提前")]),t._v("。")]),t._v(" "),a("p",[t._v("函数表达式语句，只会把声明的变量提前。")]),t._v(" "),a("p",[a("strong",[t._v("语句块")]),t._v("中定义函数：严格模式下不允许使用函数声明语句定义,浏览器兼容性问题。可以使用匿名函数表达式语句定义函数")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不同情况下对函数就行修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("borrel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("aa")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 错误的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("aa")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("命名函数表达式语句")]),t._v(" "),a("p",[t._v("var a = function 函数名 (形参) {函数体}")]),t._v(" "),a("p",[t._v("与匿名函数表达式的区别：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("命名函数有个name属性 ，属性的值就是函数的名字。")])]),t._v(" "),a("li",[a("p",[t._v("命名函数表达式的函数体中有一个和函数名称相同的变量，这个变量在函数体中任何地方都可以访问到的，而在函数外面是访问不到的。")]),t._v(" "),a("blockquote",[a("p",[t._v("这个特性在使用递归函数的时候非常有用。针对调试时可以定位到报错的函数。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" b  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'function' 可以直接调用函数b本身，在函数外不能访问")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在IE8中使用命名函数表达式时，命名函数后面使用到的命名函数的部分会被当作普通函数声明来解析，解析后又把这个函数当作一个值赋值给这个变量。这样容造成在所在作用域命名污染，可以把名字跟前面的变量定义相同的名字避免这个问题。")])])])]),t._v(" "),a("li",[a("p",[t._v("ES6 箭头函数")]),t._v(" "),a("blockquote",[a("p",[t._v("匿名函数的简写方式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"函数体"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数只有一个时，省略（）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"函数体"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数体只包含一个声明，省略大括号")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"参数"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"函数体"')]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("判断数组中是否包含0")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通写法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 箭头函数")]),t._v("\narr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("箭头函数不同特点：")]),t._v(" "),a("ol",[a("li",[t._v("箭头函数在创建的时候，时不会创建自己的上下文执行环境的")]),t._v(" "),a("li",[t._v("所有的匿名函数都可以用箭头函数表示，箭头函数的name属性时空字符串。")]),t._v(" "),a("li",[t._v("在箭头函数对象中是没有 arguments 对象的，其他所有的函数在定义的时候传进去的参数，最后表示出来的都是一个数组。这个数组表示出来就是arguments 对象。")])])]),t._v(" "),a("li",[a("p",[t._v("ES6函数生成器")]),t._v(" "),a("blockquote",[a("p",[t._v("跟函数声明语句相比多了一个 *****，函数生成器没有return，有一个yield，类事return。return在函数中一般只有一个。函数生成器中可以有多个yield")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//function * Name(obj){ console.log('sss')}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//暂停！")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用next方法继续执行")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" iter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\niter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1 {value: undefined, done: false}")]),t._v("\niter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2 {value: undefined, done: true}")]),t._v("\n")])])]),a("p",[t._v("函数生成器返回的不是一个函数，而是迭代器对象。当你要使用这个函数的时候需要先运行下函数生成器，然后把结果赋值给一个变量或者属性。当你完成了赋值的过程之后。你最后得到还是一个对象这是一个迭代器对象，这个迭代器对象有一个next方法，这个next方法是固定的，当你运行这个next方法的时候整个函数会从你函数生成器最顶上开始执行一个代码，一直执行到第一个yield，然后执行完成后把执行结果以一个对象的形式返还过来。这个返回过来的对象包括两项，第一项的叫做value，第二项的值叫done。value是yield后面的返回值，done是布尔类型，表示函数是否执行到了最后。执行过的为false，最后为true。")]),t._v(" "),a("p",[t._v("主要用途可以保存当前的状态。")])]),t._v(" "),a("li",[a("p",[t._v("函数构造器")]),t._v(" "),a("blockquote",[a("p",[t._v("Function 构造函数可以接收任意数量的参数，但最后一个参数始终都被看成是函数体，而前面的参数则枚举出了新函数的参数。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"return num1 + num2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不推荐")]),t._v("\n")])])]),a("ol",[a("li",[t._v("写的复杂")]),t._v(" "),a("li",[t._v("会调用eveo函数")]),t._v(" "),a("li",[t._v("要在全局作用域下创建")])])])]),t._v(" "),a("p",[a("strong",[t._v("总结：")])]),t._v(" "),a("ul",[a("li",[t._v("ES6函数生成器：")])]),t._v(" "),a("p",[t._v("​\t需要对某些状态进行保存，并且依次执行时使用。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("箭头函数：")]),t._v(" "),a("p",[t._v("匿名函数的另外一种写法。在闭包中使用this的时候，对外层的this指针进行引用的时候，推荐使用箭头函数。它不存在本身的上下文环境，可以减少代码量。")])]),t._v(" "),a("li",[a("p",[t._v("声明函数：")]),t._v(" "),a("p",[t._v("通常情况项如果只时创建一个函数，并且在后面需要调用的话，直接使用声明函数。声明卸载代码最顶上，逻辑清晰。")])]),t._v(" "),a("li",[a("p",[t._v("函数表达式:")]),t._v(" "),a("p",[t._v("在代码块中如if else语句中需要对函数进行修改的时候需要使用函数表达式。给对象的某个属性赋值，而且赋值为函数即给对象创建方法的时候也要使用函数表达式。回调函数中也需要使用函数表达式。也可以用箭头函数简写。")])]),t._v(" "),a("li",[a("p",[t._v("命名函数表达式：")]),t._v(" "),a("p",[t._v("代码调试的时候，匿名函数报错打出anonoymous，使用命名函数后可更清晰定位错误。可起一个跟变量相同的名字兼容IE8。可读性更好，调试也方便。")]),t._v(" "),a("p",[t._v("使用递归函数的时候")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);