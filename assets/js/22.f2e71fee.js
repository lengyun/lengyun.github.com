(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{210:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"加减乘除和比较赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加减乘除和比较赋值"}},[t._v("#")]),t._v(" 加减乘除和比较赋值")]),t._v(" "),a("p",[t._v("显式类型转换")]),t._v(" "),a("p",[t._v("String() Number() Boolean() Object()")]),t._v(" "),a("p",[t._v("隐式类型转换")]),t._v(" "),a("h2",{attrs:{id:"乘性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乘性操作符"}},[t._v("#")]),t._v(" 乘性操作符")]),t._v(" "),a("p",[t._v("都是数字进行数字运算，有一个不是数字就转换为数字进行运算，如果不能转换为数字就会被转为NaN。")]),t._v(" "),a("ul",[a("li",[t._v("乘法")]),t._v(" "),a("li",[t._v("除法")]),t._v(" "),a("li",[t._v("求模")]),t._v(" "),a("li",[t._v("减法")])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("涉及到小数时，也不精确。")]),t._v(" "),a("li",[t._v("求模运算结果不一定是整数，也可以是小数。")])]),t._v(" "),a("h2",{attrs:{id:"加性操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加性操作符"}},[t._v("#")]),t._v(" 加性操作符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("减法")]),t._v(" "),a("p",[t._v("如果两个都是数字就进行数字运算，如果不是就转换为数字就行运算。不能转换为数字的为NaN。涉及到小数的也不精确。")])]),t._v(" "),a("li",[a("p",[t._v("加法（偏向字符串拼接）")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("两个数字或布尔值相加")]),t._v(" "),a("p",[t._v("两边都是数字或者布尔类型，布尔会转化为数字，然后相加。")])]),t._v(" "),a("li",[a("p",[t._v("两个字符串拼接")]),t._v(" "),a("p",[t._v("有一个为字符串就会将另外一个转化为字符串然后拼接。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//124")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sdfa"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"sdfafalse"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Object][object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n")])])]),a("p",[t._v("不确定运算过程是如何转化的就先进行数据类型转换，再进行相加。")])])])])]),t._v(" "),a("h2",{attrs:{id:"关系操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系操作符"}},[t._v("#")]),t._v(" 关系操作符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("关系运算符（偏向于数字）")]),t._v(" "),a("p",[t._v("小于（<） 、大于（>） 、小于等于（<=）和大于等于（>=）")]),t._v(" "),a("p",[a("strong",[t._v("数字比较")])]),t._v(" "),a("p",[a("strong",[t._v("字符串比较")]),t._v("，字符串比较本质是对字符串编码进行比较。")]),t._v(" "),a("p",[a("strong",[t._v("对象比较")]),t._v("，将对象转化原始值，先valueOf()后toString()。")]),t._v(" "),a("p",[t._v("如果有一个是数值就把另外一个也转化为数字类型")]),t._v(" "),a("p",[t._v("如果有一个NaN 结果为false，NaN不等于任何值。")]),t._v(" "),a("p",[t._v("关系运算符返回值一定是布尔值。")]),t._v(" "),a("p",[t._v("关系运算符是二元运算符，从左向右计算。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true > 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1 > 5  ")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("结论")]),t._v(" "),a("p",[t._v("加法运算和比较运算都会进行隐式转换。"),a("strong",[t._v("加法运算偏向字符串处理，比较运算偏向数字比较。")])])]),t._v(" "),a("li",[a("p",[t._v("建议")]),t._v(" "),a("p",[t._v("不确定先进行显示转换再比较")])])]),t._v(" "),a("h2",{attrs:{id:"相等操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等操作符"}},[t._v("#")]),t._v(" 相等操作符")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("判断 == === != !==")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("=== 全等，")]),t._v(" "),a("ul",[a("li",[t._v("先进行数据类型比较\n"),a("ul",[a("li",[t._v("数字  比较数值 NaN跟谁都不相等")]),t._v(" "),a("li",[t._v("字符串  判断字符串编码。看着相等不一定相等")]),t._v(" "),a("li",[t._v("布尔类型")]),t._v(" "),a("li",[t._v("null 和 undefind 只和自身相等")]),t._v(" "),a("li",[t._v("对象 比较的是对象的引用")])])])])]),t._v(" "),a("li",[a("p",[t._v("== 相等")]),t._v(" "),a("p",[t._v("会进行隐式类型转换")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("null 和 undefind  相等")])]),t._v(" "),a("li",[a("p",[t._v("数字、字符串和布尔 进行混合运算时，先转化为数字再比较")])]),t._v(" "),a("li",[a("p",[t._v("字符串 和 布尔比较，都转化为数字比较")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("对象 比较的是对象的引用")])]),t._v(" "),a("li",[a("p",[t._v("对象跟原始类型比较，先把对象转化为原始类型，先valueOf()后toString()")])])])])])]),t._v(" "),a("li",[a("p",[t._v("赋值 =")]),t._v(" "),a("p",[t._v("是二元操作符，有左右两个表达式就行运算。")]),t._v(" "),a("p",[t._v("赋值运算左侧表达式必须是一个变量或者是对象的某一个属性。")]),t._v(" "),a("p",[t._v("赋值运算左侧的表达式是一个可以改变的东西，可以改变的值称做"),a("strong",[t._v("左值")])]),t._v(" "),a("p",[t._v("右边的表达式可以是任何数据类型。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =优先级最低，所以先num + 10 得到20 然后赋值给num")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nage"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//age = age + 1")]),t._v("\n")])])])])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("复合赋值(带操作符的赋值)")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("只是写法改变性能没有提升。")]),t._v(" "),a("p",[t._v(" 乘/赋值（*=）；\n 除/赋值（/=）；\n 模/赋值（%=）；\n 加/赋值（+=）；\n 减/赋值（=）；\n 左移/赋值（<<=）；\n 有符号右移/赋值（>>=）；")]),t._v(" "),a("p",[t._v("操作符都可以连续操作")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//连续赋值问题")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//b会成为全局变量")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"特殊操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊操作"}},[t._v("#")]),t._v(" +特殊操作")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("有一个是字符串，另外一个转换为字符串")])]),t._v(" "),a("li",[a("p",[t._v("有undefind、null 、布尔、数字这四种类型混合运算，都会被转为数字然后相加")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("undefind "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" undefind "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("对象到原始值的转换（不确定是数字还是字符串）")]),t._v(" "),a("blockquote",[a("p",[t._v("复习对象到字符串和数字转换")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("对象到字符串")]),t._v(" "),a("p",[t._v("先toString()后valueOf()")])]),t._v(" "),a("li",[a("p",[t._v("对象到数字")]),t._v(" "),a("p",[t._v("先valueOf() 后toString()")])])]),t._v(" "),a("p",[t._v("两个对象相加，不知道结果会是数字或者字符串，就成了对象到原始值的转换")]),t._v(" "),a("p",[a("strong",[t._v("先valueOf() 后toString()")]),t._v(" 。特殊的Date对象到原始值，直接toString()")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ''")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[].valueOf()>[] ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[].toString() ""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"11,2"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2].valueOf() > [1, 2]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// [1, 2].toString() > "1,2"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 1+"1,2" > "11,2"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"1[object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {a: 1}的valueOf() >{a:1}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// a.toString() > "[object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 1+"[object Object]" > "1[object Object]"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//js中 {} 除了表示对象外，还表示一个代码区域。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实际解析如下：")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 +1 的值 1。二元加操作符变成了一元加操作符")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//NaN 测试为"[object Object][object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 理论解析如下：")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// +{} >NaN 对象进行一元加操作，即将对象转化为数字Number({})")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \na"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//不换行 "[object Object][object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//不换行 "[object Object][object Object]"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object Object]"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//[].valueOf(); [].toString() > ""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//换行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// +[] > 0")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"比较-的特殊操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较-的特殊操作"}},[t._v("#")]),t._v(" 比较==的特殊操作")]),t._v(" "),a("p",[t._v("js的解释器当中== 的转换规则比较复杂")]),t._v(" "),a("p",[t._v("首先判断左右两侧操作数的数据类型是否相同。")]),t._v(" "),a("p",[t._v("如果相同的数据类型 == 和 ===相同")]),t._v(" "),a("p",[t._v("数据类型不相同时：")]),t._v(" "),a("ol",[a("li",[t._v("如果是 null 和 undefined 返回true")]),t._v(" "),a("li",[t._v("数字、字符串和布尔类型，先转换为数字再进行比较")]),t._v(" "),a("li",[t._v("操作数中存在对象，先把对象转化为原始值，再和另外的操作数进行比较")]),t._v(" "),a("li",[a("strong",[t._v("如果上述条件都不满足返回false")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);